name: Deploy 

on:
  workflow_run:
    # workflows to run first?
    # workflows: ["Tests"]
    branches: [master]
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Checking out the repo
      - name: Setup repo
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_branch }}
          
      - name: Make frontend envfile
        uses: SpicyPizza/create-envfile@v1.3
        with:
          access_token : ${{secrets.access_token}}
          NEXT_PUBLIC_SUPABASE_URL : ${{secrets.NEXT_PUBLIC_SUPABASE_URL}}
          NEXT_PUBLIC_SUPABASE_ANON_PUBLIC_KEY : ${{secrets.NEXT_PUBLIC_SUPABASE_ANON_PUBLIC_KEY}}
          NEXT_PUBLIC_SUPABASE_SERVICE_ROLE_KEY : ${{secrets.NEXT_PUBLIC_SUPABASE_SERVICE_ROLE_KEY}}
          directory: wee/frontend
          file_name: .env
          fail_on_empty: false

      - name: Make backend envfile
        uses: SpicyPizza/create-envfile@v1.3
        with:
          access_token : ${{secrets.access_token}}
          NEXT_PUBLIC_SUPABASE_URL : ${{secrets.NEXT_PUBLIC_SUPABASE_URL}}
          NEXT_PUBLIC_SUPABASE_ANON_PUBLIC_KEY : ${{secrets.NEXT_PUBLIC_SUPABASE_ANON_PUBLIC_KEY}}
          NEXT_PUBLIC_SUPABASE_SERVICE_ROLE_KEY : ${{secrets.NEXT_PUBLIC_SUPABASE_SERVICE_ROLE_KEY}}
          directory: wee/webscraper
          file_name: .env
          fail_on_empty: false


      # Runs a single command using the runners shell
      - name: Install wireguard
        run: sudo apt-get install wireguard

      # Creating the wireguard configuration
      - name: Create WG Config
        run: |
          sed -i -e "s@{{WG_PRIVATEKEY}}@${{ secrets.WG_PRIVATEKEY }}@" $GITHUB_WORKSPACE/tunnel.conf
          sed -i -e "s@{{WG_ADDRESS}}@${{ secrets.WG_ADDRESS }}@" $GITHUB_WORKSPACE/tunnel.conf
          sed -i -e "s@{{WG_DNS}}@${{ secrets.WG_DNS }}@" $GITHUB_WORKSPACE/tunnel.conf
          sed -i -e "s@{{WG_PUBLICKEY}}@${{ secrets.WG_PUBLICKEY }}@" $GITHUB_WORKSPACE/tunnel.conf
          sed -i -e "s@{{WG_ALLOWEDIPS}}@${{ secrets.WG_ALLOWEDIPS }}@" $GITHUB_WORKSPACE/tunnel.conf
          sed -i -e "s@{{WG_ENDPOINT}}@${{ secrets.WG_ENDPOINT }}@" $GITHUB_WORKSPACE/tunnel.conf
          sudo cp $GITHUB_WORKSPACE/tunnel.conf /etc/wireguard/
      
      # Initilizing the tunnel so we can connect to the server
      - name: WG Creating Tunnel
        run: |
          sudo apt install resolvconf
          wg-quick up $GITHUB_WORKSPACE/tunnel.conf
        # SSH Into Server
      - name: Removing old files
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            rm -r frontend  
            rm -r webscraper

      # Uploading files to server via SCP
      - name: Upload to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          source: "frontend"
          target: ./wee/


      # Running Docker Compose
      - name: Composing
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            docker-compose up --build
#docker compose up --build --detach --force-recreate