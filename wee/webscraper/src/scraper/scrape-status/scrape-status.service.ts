import { Injectable } from '@nestjs/common';
import axios from 'axios';
import { ErrorResponse } from '../models/ServiceModels';

/**
 * Service for handling website status related functionality.
 */

@Injectable()
export class ScrapeStatusService {
  /**
   * Checks the status of a website at the given URL.
   * @param url The URL of the website to check.
  */
  async scrapeStatus(url: string): Promise<string > {
      // possible improvements:
      // - check if landing page is autogerated (e.g. by next.js) and return parked
      // - differentiate between parked and under construction/not working

    if (!url) {
        return 'error';
    }
    try {
        const response = await axios.get(url);

        // Check if the page contains patterns that suggest it's autogenerated
        const isAutogenerated = this.checkIfAutogenerated(response.data);
        const state = response.status >= 200 && response.status < 300 && !isAutogenerated;
        return state ? 'live' : 'parked';
    } catch (error) {
        if (error.response) {
            // Server responded with a status outside the 2xx range
            const statusCode = error.response.status;
            if (statusCode === 404) {
                return 'not working';
            } else if (statusCode >= 500) {
                return 'under construction';
            }
        } else if (error.request) {
            // No response was received
            return 'parked';
        } else {
            return 'error';
        }
    }
  }

  /**
   * Helper function to check if a page is autogenerated.
   * @param data The HTML content of the page.
   */
  private checkIfAutogenerated(data: string): boolean {
    // Simple check for autogenerated content by looking for known patterns
    const patterns = [
        /<meta name="generator" content="Next.js"/,
        /<title>Just a moment...<\/title>/, 
        /Welcome to nginx!/,
        /<title>Index of \//, 
    ];

    return patterns.some(pattern => pattern.test(data));
  }

  /**
   * Calculates the percentage of live and parked URLs.
   * @param urls Array of URLs to check.
  */
  // async calculateSummary(urls: string[]): Promise<{ live: number; parked: number }> {
  //   const statuses = await Promise.all(urls.map(url => this.status(url)));
  //   const liveCount = statuses.filter(status => status).length;
  //   const parkedCount = statuses.length - liveCount;

  //   const livePercentage = (liveCount / statuses.length) * 100;
  //   const parkedPercentage = (parkedCount / statuses.length) * 100;

  //   return {
  //       live: liveCount,
  //       parked: parkedCount,
  //   };
  // }
}
